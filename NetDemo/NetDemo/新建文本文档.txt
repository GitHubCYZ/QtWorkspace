UINT CTCPComm::ClientSendThread(LPVOID lpvoid)
{
	CTCPComm *pSMSRecv = (CTCPComm *)lpvoid;
	CInfoManage *pInfoManage = CInfoManage::GetInfoManageInstance();
	unsigned char tmpBuf[120];
	while (pSMSRecv->m_bConnect)
	{
		Sleep(200);
	
		int DataCount=pInfoManage->GetNetDataQueueSize();
		if(DataCount>0)
		{
			RemoteSendData* tmpSendData=new RemoteSendData[DataCount];
			int currNum=0;
			while(currNum!=DataCount)
			{
				
				pInfoManage->GetNetDataQueue(tmpSendData[currNum]);
				///////////////////////////////////
				memset(tmpBuf,0,120);
				//雷达目标信息编码
				tmpBuf[0] = 0xEB;
			
				//获得当前路径
				CString m_exepath;
				CString m_strPath;
				char path[256];
				char c[256];
				GetCurrentDirectory(256,path);
				m_exepath.Format("%s",path);
				m_strPath = m_exepath + _T("\\运行参数.ini");
				::GetPrivateProfileString("运行配置","雷达地址","3",c,256,m_strPath);				
				uchar radarAddr = (uchar)atoi(c);
				tmpBuf[1] = radarAddr; 

				SHORT PH = tmpSendData[currNum].TargetNo;
				memmove(tmpBuf+2,&PH,2);

				USHORT tarNo = tmpSendData[currNum].TargetCount;
				memmove(tmpBuf+4,&tarNo,2);

				float LineSpeed = (float)(tmpSendData[currNum].LineSpeed*1000);
				memmove(tmpBuf+6,&LineSpeed,4);		

				float HXJ = (float)((tmpSendData[currNum].Heading)*180/PAI);
				memmove(tmpBuf+10,&HXJ,4);

				SHORT threaten = tmpSendData[currNum].threaten;
				memmove(tmpBuf+14,&threaten,2);

				double targetTime = tmpSendData[currNum].TargetTime;
				memmove(tmpBuf+16,&targetTime,8);

				uchar workType = tmpSendData[currNum].workType;
				tmpBuf[24] = workType;

				uchar BeamPosNo = tmpSendData[currNum].BeamPosNo;
				tmpBuf[25] = BeamPosNo;

				uchar BeamNo = tmpSendData[currNum].BeamNo;
				tmpBuf[26] = BeamNo;

				uchar BeamNum = tmpSendData[currNum].BeamNum;
				tmpBuf[27] = BeamNum;

				float CenterRCS = (float)tmpSendData[currNum].CenterRCS;
				memmove(tmpBuf+28,&CenterRCS,4);

				float MaxRCS = (float)tmpSendData[currNum].MaxRCS;
				memmove(tmpBuf+32,&MaxRCS,4);
				
				FREQINFO FreqInfo = tmpSendData[currNum].FreqInfo[0];
				memmove(tmpBuf+36,&FreqInfo,4);

				FreqInfo = tmpSendData[currNum].FreqInfo[1];
				memmove(tmpBuf+40,&FreqInfo,4);

				FreqInfo = tmpSendData[currNum].FreqInfo[2];
				memmove(tmpBuf+44,&FreqInfo,4);

				USHORT TargetRelated = tmpSendData[currNum].TargetRelated;
				memmove(tmpBuf+48,&TargetRelated,2);

				USHORT FateDetect = tmpSendData[currNum].FateDetect;
				memmove(tmpBuf+50,&FateDetect,2);

				USHORT TargetDisinguish = tmpSendData[currNum].TargetDisinguish;
				memmove(tmpBuf+52,&TargetDisinguish,2);

				float Dis = (float)(tmpSendData[currNum].TargetCoor.Distance);
				memmove(tmpBuf+54,&Dis,4);

				float Speed = (float)(tmpSendData[currNum].TargetCoor.Speed);
				memmove(tmpBuf+58,&Speed,4);

				UINT Azi = (tmpSendData[currNum].TargetCoor.Azimuth)*3000/PAI;
				//北东下方位（密位）
				Azi = (UINT)(AZI_E2N(Azi)*100000);
				memmove(tmpBuf+62,&Azi,4);

				UINT R_Azimuth = (tmpSendData[currNum].TargetCoor.R_Azimuth)*3000/PAI;
				//测站方位（密位）
				R_Azimuth = (UINT)(R_Azimuth*100000);
				memmove(tmpBuf+66,&R_Azimuth,4);

				float Long = (float)(tmpSendData[currNum].TargetCoor.Long);
				memmove(tmpBuf+70,&Long,4);
			
				float Lat = (float)(tmpSendData[currNum].TargetCoor.Lat);
				memmove(tmpBuf+74,&Lat,4);	

				float Hei = (float)(tmpSendData[currNum].TargetCoor.Hei);
				memmove(tmpBuf+78,&Hei,4);
				
				float TargetX = (float)(tmpSendData[currNum].TargetCoor.TargetXY.dX);
				memmove(tmpBuf+82,&TargetX,4);
			
				float TargetY = (float)(tmpSendData[currNum].TargetCoor.TargetXY.dY);
				memmove(tmpBuf+86,&TargetY,4);

				float TargetMokatorX = (float)(tmpSendData[currNum].TargetCoor.TargetMokatorXY.dX);
				memmove(tmpBuf+90,&TargetMokatorX,4);

				float TargetMokatorY = (float)(tmpSendData[currNum].TargetCoor.TargetMokatorXY.dY);
				memmove(tmpBuf+94,&TargetMokatorY,4);

				UCHAR firstout = tmpSendData[currNum].bFirstOut;
				tmpBuf[98] = firstout;

				UCHAR Attribute = 2;
				tmpBuf[99] = Attribute;

				short int NumAfterTrans;
				unsigned char SendBuff[COMMAXLEN];
				unsigned char AfterSendBuff[COMMAXLEN];
				SendBuff[0] = INFORMATION_HEAD_FLAG;
				SendBuff[1] = 0x42;
				SendBuff[2] = 0x41;
				SendBuff[3] = 0x40;

				pSMSRecv->SendBufChange(tmpBuf,AfterSendBuff,100,NumAfterTrans);
				// 拷贝到发送数组中
				memmove(SendBuff+4,AfterSendBuff,NumAfterTrans);

				// 校验：从目的地址字节到数据区最后一个字节的异或值
				int j = NumAfterTrans + 4;
				SendBuff[j] = SendBuff[1];
				for (int i = 2; i <= (j-1); i++)
				{
					SendBuff[j] ^= SendBuff[i];
				}

				// 帧尾
				j++;
				SendBuff[j] = 0xA5;
	
				currNum++;

				pSMSRecv->SendToServer(SendBuff,j+1);
				///////////////////////////////////
			}
			delete[] tmpSendData;
		}
	}
	return 1;
}